
(define (rember a lat)
    (cond
        ((null? lat) '())
        ((eq? a (car lat)) (cdr lat))
        (else (cons (car lat) (rember a (cdr lat))))))

(define (rember s l)
    (cond ((null? l) '())
        ((equal? s (car l)) (cdr l))
        (else (cons (car l) (rember s (cdr l))))))

(define (rember s l)
    (cond ((null? l) '())
        ((atom? (car l)) (cond ((equal? s (car l)) (cdr l))
            (else (cons (car l) (rember s (cdr l))))))
        (else ((cond ((equal? s (car l)) (cdr l))
            (else (cons (car l) (rember (cdr l)))))))))

(define (rember* a l)
    (cond ((null? l) '())
        ((atom? (car l)) 
        (cond 
            ((eq? a (car l) (rember* a (cdr l))))
            (else (cons (car l) (rember* a (cdr l))))))
    (else (cons (rember* a (car l)) (rember* a (cdr l))))))

(define (insertR new old lat)
    (cond
        ((null? lat) '())
        ((eq? old (car lat)) (cons old (cons new (cdr lat))))
        (else (cons (car lat) (insertR new old (cdr lat))))))

(define (insertR* new old l)
    (cond ((null? l) '())
        ((atom? (car l)) (cond ((eq? old (car l)) (cons old (cons new (cdr lat))))
            (else (cons (car lat) (insertR* new old (cdr lat))))))
        (else (cons (insertR* new old (car l)) (insertR* new old (cdr l))))))

(define (occur a lat)
    (cond ((null? lat) 0)
        ((eqan? a (car lat)) (add1 (occur a (cdr lat))))
        (else (occur a (cdr lat)))))

(define (occur* a l)
    (cond ((null? l) 0)
        ((atom? (car l)) 
        (cond ((eqan? a (car l)) (add1 (occur* a (cdr l))))
            (else (occur* a (cdr l)))))
        (else (+ (occur* a (car l)) (occur* a (cdr l))))))

(define (subst* new old l)
    (cond ((null? l) '())
        ((atom? (car l)) 
        (cond ((eq? (car l)) (cons new (subst* new old (cdr l))))
            (else (cons (car l) (subst* new old (cdr l))))))
        (else (cons (subst* new old (car l) (subst* new old (cdr l)))))))

(define (insertL* new old l)
    (cond ((null? l) '())
        (atom? (car l) 
        (cond ((eq? old (car l)) (cons new (cons old (insertL* new old (cdr l)))))
            (else (cons (car l) (insertL* new old (cdr l))))))
        (else (cons (insertL* new old (car l)) (insertL* new old (cdr l))))))

(define (member* a l)
    (cond ((null? l) #f)
        ((atom? (car l)) 
        (cond ((eqan? a (car l)) #t)
            (else (member* a (cdr l)))))
    (else (or (member* a (car l)) (member* a (cdr l))))))

(define (leftmost l)
    (cond ((null? l) #f)
        ((atom? (car l)) (car l))
        (else (leftmost (car l)))))

(define (eqlist? l1 l2)
    (cond ((and (null? l1) (null? l2)) #t)
        ((and (null? l1) (atom? (car l2))) #f)
        ((null? l1) #f)
        ((and (atom? (car l1)) (null? l2))#f)
        ((and (atom? (car l1)) (atom? (car l2))) (and (eqan? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2))))
        ((atom? (car l1)) #f)
        ((null? l2) #f)
        ((atom? (car l2)) #f)
        (else (and (eqlist? (car l1)(car l2)) (eqlist? (cdr l1) (cdr l2))))))

(define (eqlist? l1 l2)
    (cond ((and (null? l1) (null? l2)) #t)
        ((or (null? l1) (null? l2)) #f)
        ((and (atom? (car l1)) (atom? (car l2))) (and (eqan? (car l1) (car l2)) (cdr l1) (cdr l2)))
        ((or (atom? (car l1)) (atom? (car 2))) #f)
        (else (and (eqlist? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2))))))

(define (equal? s1 s2)
    (cond ((and (atom? s1) (atom? s2)) (eqan? s1 s2))
        ((or (atom? s1) (atom? s2)) #f)
        (else (eqlist? s1 s2))))

(define (eqlist? l1 l2)
    (cond ((and (null? l1) (null? l2)) #t)
        ((or (null? l1) (null? l2)) #f)
        (else (and (equal? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2))))))